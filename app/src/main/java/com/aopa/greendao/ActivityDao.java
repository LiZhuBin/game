package com.aopa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.happygame.been.Activity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTIVITY".
*/
public class ActivityDao extends AbstractDao<Activity, String> {

    public static final String TABLENAME = "ACTIVITY";

    /**
     * Properties of entity Activity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Build_data = new Property(1, String.class, "build_data", false, "BUILD_DATA");
        public final static Property User_num = new Property(2, String.class, "user_num", false, "USER_NUM");
        public final static Property Praise_num = new Property(3, String.class, "praise_num", false, "PRAISE_NUM");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Image = new Property(7, String.class, "image", false, "IMAGE");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
        public final static Property ParticipatorId = new Property(9, String.class, "participatorId", false, "PARTICIPATOR_ID");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Add_id = new Property(11, String.class, "add_id", false, "ADD_ID");
        public final static Property Comment = new Property(12, String.class, "comment", false, "COMMENT");
    }


    public ActivityDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTIVITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"BUILD_DATA\" TEXT," + // 1: build_data
                "\"USER_NUM\" TEXT," + // 2: user_num
                "\"PRAISE_NUM\" TEXT," + // 3: praise_num
                "\"TYPE\" TEXT," + // 4: type
                "\"TIME\" TEXT," + // 5: time
                "\"ADDRESS\" TEXT," + // 6: address
                "\"IMAGE\" TEXT," + // 7: image
                "\"REMARK\" TEXT," + // 8: remark
                "\"PARTICIPATOR_ID\" TEXT," + // 9: participatorId
                "\"TITLE\" TEXT," + // 10: title
                "\"ADD_ID\" TEXT," + // 11: add_id
                "\"COMMENT\" TEXT);"); // 12: comment
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTIVITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String build_data = entity.getBuild_data();
        if (build_data != null) {
            stmt.bindString(2, build_data);
        }
 
        String user_num = entity.getUser_num();
        if (user_num != null) {
            stmt.bindString(3, user_num);
        }
 
        String praise_num = entity.getPraise_num();
        if (praise_num != null) {
            stmt.bindString(4, praise_num);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        String participatorId = entity.getParticipatorId();
        if (participatorId != null) {
            stmt.bindString(10, participatorId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String add_id = entity.getAdd_id();
        if (add_id != null) {
            stmt.bindString(12, add_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(13, comment);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Activity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String build_data = entity.getBuild_data();
        if (build_data != null) {
            stmt.bindString(2, build_data);
        }
 
        String user_num = entity.getUser_num();
        if (user_num != null) {
            stmt.bindString(3, user_num);
        }
 
        String praise_num = entity.getPraise_num();
        if (praise_num != null) {
            stmt.bindString(4, praise_num);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(8, image);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
 
        String participatorId = entity.getParticipatorId();
        if (participatorId != null) {
            stmt.bindString(10, participatorId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String add_id = entity.getAdd_id();
        if (add_id != null) {
            stmt.bindString(12, add_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(13, comment);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Activity readEntity(Cursor cursor, int offset) {
        Activity entity = new Activity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // build_data
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // praise_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // remark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // participatorId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // add_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // comment
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Activity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBuild_data(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPraise_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParticipatorId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdd_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setComment(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Activity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Activity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Activity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
