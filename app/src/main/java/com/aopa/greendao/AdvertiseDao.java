package com.aopa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.happygame.been.Advertise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERTISE".
*/
public class AdvertiseDao extends AbstractDao<Advertise, String> {

    public static final String TABLENAME = "ADVERTISE";

    /**
     * Properties of entity Advertise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Advertise_id = new Property(0, String.class, "advertise_id", true, "ADVERTISE_ID");
        public final static Property Advertise_image = new Property(1, String.class, "advertise_image", false, "ADVERTISE_IMAGE");
    }


    public AdvertiseDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertiseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERTISE\" (" + //
                "\"ADVERTISE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: advertise_id
                "\"ADVERTISE_IMAGE\" TEXT);"); // 1: advertise_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERTISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Advertise entity) {
        stmt.clearBindings();
 
        String advertise_id = entity.getAdvertise_id();
        if (advertise_id != null) {
            stmt.bindString(1, advertise_id);
        }
 
        String advertise_image = entity.getAdvertise_image();
        if (advertise_image != null) {
            stmt.bindString(2, advertise_image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Advertise entity) {
        stmt.clearBindings();
 
        String advertise_id = entity.getAdvertise_id();
        if (advertise_id != null) {
            stmt.bindString(1, advertise_id);
        }
 
        String advertise_image = entity.getAdvertise_image();
        if (advertise_image != null) {
            stmt.bindString(2, advertise_image);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Advertise readEntity(Cursor cursor, int offset) {
        Advertise entity = new Advertise( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // advertise_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // advertise_image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Advertise entity, int offset) {
        entity.setAdvertise_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAdvertise_image(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Advertise entity, long rowId) {
        return entity.getAdvertise_id();
    }
    
    @Override
    public String getKey(Advertise entity) {
        if(entity != null) {
            return entity.getAdvertise_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Advertise entity) {
        return entity.getAdvertise_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
