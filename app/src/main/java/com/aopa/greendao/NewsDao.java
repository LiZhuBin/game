package com.aopa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.happygame.been.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, String> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property New_id = new Property(0, String.class, "new_id", true, "NEW_ID");
        public final static Property New_title = new Property(1, String.class, "new_title", false, "NEW_TITLE");
        public final static Property New_content = new Property(2, String.class, "new_content", false, "NEW_CONTENT");
        public final static Property New_image = new Property(3, String.class, "new_image", false, "NEW_IMAGE");
        public final static Property New_comment_id = new Property(4, String.class, "new_comment_id", false, "NEW_COMMENT_ID");
        public final static Property New_comment = new Property(5, String.class, "new_comment", false, "NEW_COMMENT");
        public final static Property New_drawable = new Property(6, int.class, "new_drawable", false, "NEW_DRAWABLE");
    }


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"NEW_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: new_id
                "\"NEW_TITLE\" TEXT," + // 1: new_title
                "\"NEW_CONTENT\" TEXT," + // 2: new_content
                "\"NEW_IMAGE\" TEXT," + // 3: new_image
                "\"NEW_COMMENT_ID\" TEXT," + // 4: new_comment_id
                "\"NEW_COMMENT\" TEXT," + // 5: new_comment
                "\"NEW_DRAWABLE\" INTEGER NOT NULL );"); // 6: new_drawable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, News entity) {
        stmt.clearBindings();
 
        String new_id = entity.getNew_id();
        if (new_id != null) {
            stmt.bindString(1, new_id);
        }
 
        String new_title = entity.getNew_title();
        if (new_title != null) {
            stmt.bindString(2, new_title);
        }
 
        String new_content = entity.getNew_content();
        if (new_content != null) {
            stmt.bindString(3, new_content);
        }
 
        String new_image = entity.getNew_image();
        if (new_image != null) {
            stmt.bindString(4, new_image);
        }
 
        String new_comment_id = entity.getNew_comment_id();
        if (new_comment_id != null) {
            stmt.bindString(5, new_comment_id);
        }
 
        String new_comment = entity.getNew_comment();
        if (new_comment != null) {
            stmt.bindString(6, new_comment);
        }
        stmt.bindLong(7, entity.getNew_drawable());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        String new_id = entity.getNew_id();
        if (new_id != null) {
            stmt.bindString(1, new_id);
        }
 
        String new_title = entity.getNew_title();
        if (new_title != null) {
            stmt.bindString(2, new_title);
        }
 
        String new_content = entity.getNew_content();
        if (new_content != null) {
            stmt.bindString(3, new_content);
        }
 
        String new_image = entity.getNew_image();
        if (new_image != null) {
            stmt.bindString(4, new_image);
        }
 
        String new_comment_id = entity.getNew_comment_id();
        if (new_comment_id != null) {
            stmt.bindString(5, new_comment_id);
        }
 
        String new_comment = entity.getNew_comment();
        if (new_comment != null) {
            stmt.bindString(6, new_comment);
        }
        stmt.bindLong(7, entity.getNew_drawable());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // new_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // new_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // new_content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // new_image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // new_comment_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // new_comment
            cursor.getInt(offset + 6) // new_drawable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setNew_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNew_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNew_content(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNew_image(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNew_comment_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNew_comment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNew_drawable(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(News entity, long rowId) {
        return entity.getNew_id();
    }
    
    @Override
    public String getKey(News entity) {
        if(entity != null) {
            return entity.getNew_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(News entity) {
        return entity.getNew_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
