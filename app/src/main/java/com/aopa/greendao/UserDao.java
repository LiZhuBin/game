package com.aopa.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.happygame.been.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Praise_num = new Property(1, String.class, "praise_num", false, "PRAISE_NUM");
        public final static Property Praise_id = new Property(2, String.class, "praise_id", false, "PRAISE_ID");
        public final static Property Six = new Property(3, String.class, "six", false, "SIX");
        public final static Property Credit = new Property(4, String.class, "credit", false, "CREDIT");
        public final static Property Signature = new Property(5, String.class, "signature", false, "SIGNATURE");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Friends = new Property(8, String.class, "friends", false, "FRIENDS");
        public final static Property CollectActivities = new Property(9, String.class, "collectActivities", false, "COLLECT_ACTIVITIES");
        public final static Property DoingActivities = new Property(10, String.class, "doingActivities", false, "DOING_ACTIVITIES");
        public final static Property Image = new Property(11, String.class, "image", false, "IMAGE");
        public final static Property Password = new Property(12, String.class, "password", false, "PASSWORD");
        public final static Property Posts = new Property(13, String.class, "posts", false, "POSTS");
        public final static Property AttentionId = new Property(14, String.class, "attentionId", false, "ATTENTION_ID");
        public final static Property BeattentionId = new Property(15, String.class, "beattentionId", false, "BEATTENTION_ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"PRAISE_NUM\" TEXT," + // 1: praise_num
                "\"PRAISE_ID\" TEXT," + // 2: praise_id
                "\"SIX\" TEXT," + // 3: six
                "\"CREDIT\" TEXT," + // 4: credit
                "\"SIGNATURE\" TEXT," + // 5: signature
                "\"ADDRESS\" TEXT," + // 6: address
                "\"NAME\" TEXT," + // 7: name
                "\"FRIENDS\" TEXT," + // 8: friends
                "\"COLLECT_ACTIVITIES\" TEXT," + // 9: collectActivities
                "\"DOING_ACTIVITIES\" TEXT," + // 10: doingActivities
                "\"IMAGE\" TEXT," + // 11: image
                "\"PASSWORD\" TEXT," + // 12: password
                "\"POSTS\" TEXT," + // 13: posts
                "\"ATTENTION_ID\" TEXT," + // 14: attentionId
                "\"BEATTENTION_ID\" TEXT);"); // 15: beattentionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String praise_num = entity.getPraise_num();
        if (praise_num != null) {
            stmt.bindString(2, praise_num);
        }
 
        String praise_id = entity.getPraise_id();
        if (praise_id != null) {
            stmt.bindString(3, praise_id);
        }
 
        String six = entity.getSix();
        if (six != null) {
            stmt.bindString(4, six);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(5, credit);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String friends = entity.getFriends();
        if (friends != null) {
            stmt.bindString(9, friends);
        }
 
        String collectActivities = entity.getCollectActivities();
        if (collectActivities != null) {
            stmt.bindString(10, collectActivities);
        }
 
        String doingActivities = entity.getDoingActivities();
        if (doingActivities != null) {
            stmt.bindString(11, doingActivities);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(12, image);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(13, password);
        }
 
        String posts = entity.getPosts();
        if (posts != null) {
            stmt.bindString(14, posts);
        }
 
        String attentionId = entity.getAttentionId();
        if (attentionId != null) {
            stmt.bindString(15, attentionId);
        }
 
        String beattentionId = entity.getBeattentionId();
        if (beattentionId != null) {
            stmt.bindString(16, beattentionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String praise_num = entity.getPraise_num();
        if (praise_num != null) {
            stmt.bindString(2, praise_num);
        }
 
        String praise_id = entity.getPraise_id();
        if (praise_id != null) {
            stmt.bindString(3, praise_id);
        }
 
        String six = entity.getSix();
        if (six != null) {
            stmt.bindString(4, six);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(5, credit);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(6, signature);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String friends = entity.getFriends();
        if (friends != null) {
            stmt.bindString(9, friends);
        }
 
        String collectActivities = entity.getCollectActivities();
        if (collectActivities != null) {
            stmt.bindString(10, collectActivities);
        }
 
        String doingActivities = entity.getDoingActivities();
        if (doingActivities != null) {
            stmt.bindString(11, doingActivities);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(12, image);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(13, password);
        }
 
        String posts = entity.getPosts();
        if (posts != null) {
            stmt.bindString(14, posts);
        }
 
        String attentionId = entity.getAttentionId();
        if (attentionId != null) {
            stmt.bindString(15, attentionId);
        }
 
        String beattentionId = entity.getBeattentionId();
        if (beattentionId != null) {
            stmt.bindString(16, beattentionId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // praise_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // praise_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // six
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // credit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // signature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // friends
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // collectActivities
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // doingActivities
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // image
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // password
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // posts
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // attentionId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // beattentionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPraise_num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPraise_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSix(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCredit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSignature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFriends(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCollectActivities(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDoingActivities(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPassword(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPosts(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAttentionId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBeattentionId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
